build.dependsOn jacocoTestReport
build.dependsOn test
check.dependsOn jacocoTestCoverageVerification

test {
    finalizedBy jacocoTestReport
}

def covReq = '0.9'
def includesArray = [
        'io.dgj7.jod.*'
]
def excludesArray = [
        // todo: check if we need these listed here
        /* probably don't need to test these */
        'io/dgj7/jod/model/**/*.class',
        'io/dgj7/jod/DifferencerConfiguration$DiffConfigBuilder.class',

        // todo: eliminate these
        'io/dgj7/jod/core/diff/impl/DefaultObjectDifferencer.class',

        'io/dgj7/jod/core/maps/diff/impl/DefaultMapDifferencer.class',

        'io/dgj7/jod/xt/nulls/impl/DefaultNullHandler.class',

        'io/dgj7/jod/xt/reflect/impl/DefaultFieldFinder.class',

        'io/dgj7/jod/metadata/impl/DefaultMetaDataFactory.class',
        'io/dgj7/jod/metadata/impl/DefaultMetaDataFactory$DefaultMetaData.class',

        'io/dgj7/jod/util/FirstNonNull.class',

        'io/dgj7/jod/Differencer.class',

        'io/dgj7/jod/util/GenericTypeUtility.class',
        'io/dgj7/jod/util/SortUtility.class',
]

jacoco {
    toolVersion = "0.8.13"
}

jacocoTestReport {
    //dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
}

jacocoTestCoverageVerification {
    enabled = true

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: excludesArray)
        }))
    }

    violationRules {
        enabled = true

        rule {
            enabled = true
            includes = includesArray
            excludes = excludesArray
            limit {
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
        }

        rule {
            enabled = true
            element = 'CLASS'
            includes = includesArray
            excludes = excludesArray
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
        }

        rule {
            enabled = true
            element = 'METHOD'
            includes = includesArray
            excludes = excludesArray
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
        }

        rule {
            enabled = true
            element = 'PACKAGE'
            includes = includesArray
            excludes = excludesArray
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
        }

        rule {
            enabled = true
            element = 'SOURCEFILE'
            includes = includesArray
            excludes = excludesArray
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'CLASS'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'COMPLEXITY'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = BigDecimal.valueOf(Double.valueOf("${covReq}"))
            }
        }
    }
}
